/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication1;

import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author bruno
 */
public class nDpiFilter extends javax.swing.JFrame {

    /**
     * Creates new form nDpiFilter
     */
    public nDpiFilter() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setTitle("nDpi Filter");
        MenuFrame mf = new MenuFrame();
        this.setIconImage(mf.getIconImage());
        jLabel2.setVisible(false);
        jComboBoxCondition.setVisible(false);
        jLabelProtocols.setVisible(false);
        jComboBoxProtocol.setVisible(false);
        jLabelValues.setVisible(false);
        jComboBoxValues.setVisible(false);
        jComboBoxFormat.setVisible(false);
        String[] values = new String[256];
        for(int n = 0; n < 256; n++) {
            values[n] = (String.valueOf(n));
        }
        this.jComboBoxValues.setModel(new DefaultComboBoxModel(values));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exit = new javax.swing.JButton();
        jButtonDo = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabelValues = new javax.swing.JLabel();
        jCheckBoxName = new javax.swing.JCheckBox();
        jCheckBoxNetwork = new javax.swing.JCheckBox();
        jCheckBoxApplication = new javax.swing.JCheckBox();
        jLabelProtocols = new javax.swing.JLabel();
        jLabelFilter = new javax.swing.JLabel();
        jLabelTittle = new javax.swing.JLabel();
        jComboBoxValues = new javax.swing.JComboBox<>();
        jComboBoxFormat = new javax.swing.JComboBox<>();
        jComboBoxCondition = new javax.swing.JComboBox<>();
        jComboBoxProtocol = new javax.swing.JComboBox<>();
        wallaper2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        exit.setBackground(new java.awt.Color(255, 0, 0));
        exit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        exit.setForeground(new java.awt.Color(255, 255, 255));
        exit.setText("x");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        getContentPane().add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 0, -1, -1));

        jButtonDo.setBackground(new java.awt.Color(255, 255, 0));
        jButtonDo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonDo.setText("Add Filter");
        jButtonDo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDoActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonDo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 270, -1, -1));

        Back.setBackground(new java.awt.Color(255, 102, 0));
        Back.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });
        getContentPane().add(Back, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 270, -1, -1));

        jButton3.setBackground(new java.awt.Color(0, 255, 0));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setText("See Filter");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 270, 120, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Select a condition:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, 120, -1));

        jLabelValues.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelValues.setText("Select a value:");
        getContentPane().add(jLabelValues, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, 120, -1));

        jCheckBoxName.setText("protocol name");
        jCheckBoxName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxNameActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBoxName, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, -1, -1));

        jCheckBoxNetwork.setText("network");
        jCheckBoxNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxNetworkActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBoxNetwork, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, -1, -1));

        jCheckBoxApplication.setText("application");
        jCheckBoxApplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxApplicationActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBoxApplication, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 110, -1, -1));

        jLabelProtocols.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelProtocols.setText("Select a protocol:");
        getContentPane().add(jLabelProtocols, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, -1, 20));

        jLabelFilter.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelFilter.setText("Select a filter:");
        getContentPane().add(jLabelFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 170, -1));

        jLabelTittle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelTittle.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTittle.setText("nDpi Filter");
        getContentPane().add(jLabelTittle, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 150, 30));

        getContentPane().add(jComboBoxValues, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 210, 70, -1));

        jComboBoxFormat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "dec", "hex", "oct" }));
        jComboBoxFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFormatActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBoxFormat, new org.netbeans.lib.awtextra.AbsoluteConstraints(223, 210, 60, -1));

        jComboBoxCondition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "==", "<", ">" }));
        getContentPane().add(jComboBoxCondition, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 160, 60, -1));

        jComboBoxProtocol.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FTP", "POP", "SMTP", "IMAP", "DNS", "IPP", "HTTP", "MDNS", "NTP", "NETBIOS", "NFS", "SSDP", "BGP", "SNMP", "XDMCP", "SMB", "SYSLOG", "DHCP", "PostgreeSQL", "MySQL", "TDS", "DirectDownloadLink", "I23V5", "AppleJuice", "DirectConnect", "Socrates", "WinMX", "VMware", "PANDO", "Filetopia", "iMESH", "Kontiki", "OpenFT", "Kazaa", "Fasttrack", "Gnutella", "eDonkey", "BitTorrent", "OFF", "AVI", "Flash", "OGG", "MPEG", "QuickTime", "RealMedia", "Windowsmedia", "MMS", "XBOX", "QQ", "MOVE", "RTSP", "Feidian", "Icecast", "PPLive", "PPStream", "Zattoo", "SHOUTCast", "SopCast", "TVAnts", "TVUplayer", "VeohTV", "QQLive", "Thunder", "Webthunder", "Soulseek", "GaduGadu", "IRC", "Popo", "Jabber", "MSN", "Oscar", "Yahoo", "Battlefield", "Quake", "VRRP", "Steam", "Halflife2", "World of Warcraft", "Telnet", "STUN", "IPSEC", "GRE", "ICMP", "IGMP", "EGP", "SCTP", "OSPF", "IP in IP", "RTP", "RDP", "VNC", "PCAnywhere", "SSL", "SSH", "USENET", "MGCP", "IAX", "TFTP", "AFP", "StealthNet", "Aimini", "SIP", "Truphone", "ICMPv6", "DHCPv6", "Armagetron", "CrossFire", "Dofus", "Fiesta", "Florensia", "Guildwars", "HTTP Application Activesync", "Kerberos", "LDAP", "MapleStory", "msSQL", "PPTP", "WARCRAFT3", "World of Kung Fu", "MEEBO", "Facebook", "Twitter", "Dropbox", "Gmail", "Google Maps", "YouTube", "Skype", "Google", "DCE RPC", "NetFlow_IPFIX", "sFlow", "HTTP Connect", "HTTP Proxy", "Netflix", "Citrix", "CitrixOnline", "GotoMeeting", "Apple", "Webex", "WhatsApp", "Apple iCloud", "Viber", "Apple iTunes", "Radius", "WindowsUpdate", "TeamViewer", "Tuenti", "LotusNotes", "SAP", "GTP", "UPnP", "LLMNR", "RemoteScan", "Spotify", "H323", "OpenVPN", "NOE", "CiscoVPN", "TeamSpeak", "Tor", "CiscoSkinny", "RTCP", "RSYNC", "Oracle", "Corba", "UbuntuONE", "CNN", "Wikipedia", "Whois-DAS", "Collectd", "Redis", "ZeroMQ", "Megaco", "QUIC", "WhatsApp Voice", "Stracraft", "Teredo", "Snapchat", "Simet", "OpenSignal", "99Taxi", "GloboTV", "Deezer", "Instagram", "Microsoft cloud services", "Twitch", "KakaoTalk Voice", "KakaoTalk Chat", "HotspotShield VPN" }));
        jComboBoxProtocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxProtocolActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBoxProtocol, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 200, -1));

        wallaper2.setBackground(new java.awt.Color(0, 255, 0));
        wallaper2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        wallaper2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/índice_1.jpg"))); // NOI18N
        wallaper2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                wallaper2MouseDragged(evt);
            }
        });
        wallaper2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                wallaper2MousePressed(evt);
            }
        });
        getContentPane().add(wallaper2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*End the application.*/
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed
    String toret = "";
    /*Create the nDpi filter with the established conditions.*/
    private void jButtonDoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDoActionPerformed
        // TODO add your handling code here:
        if(jCheckBoxNetwork.isSelected()){
            if(toret.isEmpty()){
                toret += "ndpi.protocol.network " + jComboBoxCondition.getSelectedItem() + " " + jComboBoxValues.getSelectedItem();
            }else{
                toret += "\nndpi.protocol.network " + jComboBoxCondition.getSelectedItem() + " " + jComboBoxValues.getSelectedItem();
            } 
            jCheckBoxNetwork.setSelected(false);
            jCheckBoxName.setEnabled(true);
            jCheckBoxApplication.setEnabled(true);
            jLabel2.setVisible(false);
            jComboBoxCondition.setVisible(false);
            jLabelValues.setVisible(false);
            jComboBoxValues.setVisible(false);
            jComboBoxFormat.setVisible(false);
        }else if(jCheckBoxApplication.isSelected()){
            if(toret.isEmpty()){
                toret += "ndpi.protocol.application " + jComboBoxCondition.getSelectedItem() + " " + jComboBoxValues.getSelectedItem();
            }else{
                toret += "\nndpi.protocol.application " + jComboBoxCondition.getSelectedItem() + " " + jComboBoxValues.getSelectedItem();
            }    
            jCheckBoxApplication.setSelected(false);
            jCheckBoxName.setEnabled(true);
            jCheckBoxNetwork.setEnabled(true);
            jLabel2.setVisible(false);
            jComboBoxCondition.setVisible(false);
            jLabelValues.setVisible(false);
            jComboBoxValues.setVisible(false);
            jComboBoxFormat.setVisible(false);
        }else{
            if(toret.isEmpty()){
                toret += "ndpi.protocol.name contains " + jComboBoxProtocol.getSelectedItem();
            }else{
                toret += "\nndpi.protocol.name contains " + jComboBoxProtocol.getSelectedItem();
            }
            jCheckBoxName.setSelected(false);
            jCheckBoxNetwork.setEnabled(true);
            jCheckBoxApplication.setEnabled(true);
            jLabelProtocols.setVisible(false);
            jComboBoxProtocol.setVisible(false);
        }
        
    }//GEN-LAST:event_jButtonDoActionPerformed
 
    /*Allows the return to the previous menu.*/
    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        SelectTypeFilter obj = new SelectTypeFilter();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_BackActionPerformed

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseEntered
    int x, y;
    /*Allows you to move the menu across the screen by pressing and holding the background image.*/
    private void wallaper2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wallaper2MousePressed
        // TODO add your handling code here:
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_wallaper2MousePressed

    private void wallaper2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wallaper2MouseDragged
        // TODO add your handling code here:
        this.setLocation(this.getLocation().x + evt.getX() - x, this.getLocation().y + evt.getY() - y);
    }//GEN-LAST:event_wallaper2MouseDragged

    /*Check that the name field is selected. If it is, it prevents others from being selected.*/
    private void jCheckBoxNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNameActionPerformed
        // TODO add your handling code here:
        if(jCheckBoxName.isSelected()){
            jCheckBoxNetwork.setEnabled(false);
            jCheckBoxApplication.setEnabled(false);
            jLabelProtocols.setVisible(true);
            jComboBoxProtocol.setVisible(true);
        }else{
            jCheckBoxNetwork.setEnabled(true);
            jCheckBoxApplication.setEnabled(true);
            jLabelProtocols.setVisible(false);
            jComboBoxProtocol.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBoxNameActionPerformed

    /*Check that the network field is selected. If it is, it prevents others from being selected.*/
    private void jCheckBoxNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNetworkActionPerformed
        // TODO add your handling code here:
        if(jCheckBoxNetwork.isSelected()){
            jCheckBoxName.setEnabled(false);
            jCheckBoxApplication.setEnabled(false);
            jLabel2.setVisible(true);
            jComboBoxCondition.setVisible(true);
            jLabelValues.setVisible(true);
            jComboBoxValues.setVisible(true);
            jComboBoxFormat.setVisible(true);
        }else{
            jCheckBoxName.setEnabled(true);
            jCheckBoxApplication.setEnabled(true);
            jLabel2.setVisible(false);
            jComboBoxCondition.setVisible(false);
            jLabelValues.setVisible(false);
            jComboBoxValues.setVisible(false);
            jComboBoxFormat.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBoxNetworkActionPerformed

    /*Check that the application field is selected. If it is, it prevents others from being selected.*/
    private void jCheckBoxApplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxApplicationActionPerformed
        // TODO add your handling code here:
        if(jCheckBoxApplication.isSelected()){
            jCheckBoxName.setEnabled(false);
            jCheckBoxNetwork.setEnabled(false);
            jLabel2.setVisible(true);
            jComboBoxCondition.setVisible(true);
            jLabelValues.setVisible(true);
            jComboBoxValues.setVisible(true);
            jComboBoxFormat.setVisible(true);
        }else{
            jCheckBoxName.setEnabled(true);
            jCheckBoxNetwork.setEnabled(true);
            jLabel2.setVisible(false);
            jComboBoxCondition.setVisible(false);
            jLabelValues.setVisible(false);
            jComboBoxValues.setVisible(false);
            jComboBoxFormat.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBoxApplicationActionPerformed

    private void jComboBoxFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFormatActionPerformed
        // TODO add your handling code here:
        if(jComboBoxFormat.getSelectedIndex() == 0){
            String[] values = new String[256];
            for(int n = 0; n < 256; n++) {
                values[n] = (String.valueOf(n));
            }
            this.jComboBoxValues.setModel(new DefaultComboBoxModel(values));
        }else if(jComboBoxFormat.getSelectedIndex() == 1){
            String[] values = new String[256];
            for(int n = 0; n < 256; n++) {
                values[n] = "0x"+String.valueOf(Integer.toHexString(n)).toUpperCase();
            }
            this.jComboBoxValues.setModel(new DefaultComboBoxModel(values));
        }else{
            String[] values = new String[256];
            for(int n = 0; n < 256; n++) {
                values[n] = "0"+String.valueOf(Integer.toOctalString(n)).toUpperCase();
            }
            this.jComboBoxValues.setModel(new DefaultComboBoxModel(values));
        }
    }//GEN-LAST:event_jComboBoxFormatActionPerformed

    private void jComboBoxProtocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxProtocolActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxProtocolActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        SeeFilter obj = new SeeFilter();
        obj.setVisible(true);
        dispose();
        obj.ret = "nDpi";
        SeeFilter.jTextArea1.setText(toret);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(nDpiFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(nDpiFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(nDpiFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(nDpiFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new nDpiFilter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton exit;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonDo;
    private javax.swing.JCheckBox jCheckBoxApplication;
    private javax.swing.JCheckBox jCheckBoxName;
    private javax.swing.JCheckBox jCheckBoxNetwork;
    private javax.swing.JComboBox<String> jComboBoxCondition;
    private javax.swing.JComboBox<String> jComboBoxFormat;
    private javax.swing.JComboBox<String> jComboBoxProtocol;
    private javax.swing.JComboBox<String> jComboBoxValues;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelFilter;
    private javax.swing.JLabel jLabelProtocols;
    private javax.swing.JLabel jLabelTittle;
    private javax.swing.JLabel jLabelValues;
    private javax.swing.JLabel wallaper2;
    // End of variables declaration//GEN-END:variables
}
